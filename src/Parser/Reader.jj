/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(Reader)
package Parser;
import java.util.LinkedList;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import Grammaire.*;
import Grammaire.Binaires.*;

public class Reader
{
  public static Expression read(Reader parser) throws ParseException
  {
    Expression exp = null;
    //System.out.println("Reading from standard input...");
    //System.out.print("Enter an expression : ");
    try
    {
      exp = Reader.EXPRESSION_INIT();
      //System.out.println("exp = " + exp.toString());
    }
    catch (Exception e)
    {
      System.out.println("NOK.");
      System.out.println(e.getMessage());
      throw new ParseException();
      //Reader.ReInit(System.in);
    }
    catch (Error e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      throw new ParseException();
    }
	return exp;
    }
  }

PARSER_END(Reader)

// les caractères ignorés
SKIP :
{
   " "
|  "'"
| "\t"
| "\r"
| "\n"
  // attention élimine la notion de fin de ligne
| "\u0001"
| "\u0002"
| "\u0003"
| "\u0004"
| "\u0005"
| "\u0006"
| "\u0007"
| "\u0008"
| "\u000b"
| "\u000c"
| "\u000e"
| "\u000f"
| "\u0010"
| "\u0011"
| "\u0012"
| "\u0013"
| "\u0014"
| "\u0015"
| "\u0016"
| "\u0017"
| "\u0018"
| "\u0019"
| "\u001a"
| "\u001b"
| "\u001c"
| "\u001d"
| "\u001e"
| "\u001f"
| "\u007f"
| "\0"
}

MORE :
{
  "//" : IN_SL_COMMENT
| "/*" : IN_ML_COMMENT
}

< IN_SL_COMMENT >
SPECIAL_TOKEN :
{
  < SL_COMMENT :
    "\n"
  | "\r"
  | "\r\n" > : DEFAULT
}

< IN_ML_COMMENT >
SPECIAL_TOKEN :
{
  < ML_COMMENT : "*/" > : DEFAULT
}

< IN_SL_COMMENT, IN_ML_COMMENT >
SKIP :
{
  < ~[ ] >
} // les lexèmes du langage

TOKEN : /* TO_IGNORE */
{
      < DIGITS : ["0"-"9"]>
	| < LOWER_LETTERS : ["a"-"z"] >
	| < UPPER_LETTERS : [ "A", "C", "D", "I"-"L", "N"-"Q", "S"-"W", "Y"-"Z"] >
	| < NONE : "">
}


TOKEN : /* SPECIALS */
{

    < LACC : "{" >
  | < RACC : "}" >
  | < SEMI : ";" >

}

TOKEN : /* BINAIRE */
{
    < PIPE : "|" >
  | < MORETHAN : ">" >
}

TOKEN : /* UNAIRE */
{
  < UNAIRE :
  (
      < HIT >
    | < RECOLT >
    | < EXPLORE >
    | < BEST >
    | < FOLLOW >
    | < MOVE >
  )
  >
  
    | < #HIT : "H" >
	| < #RECOLT : "R" >
	| < #EXPLORE : "E" >
	| < #BEST : "B">
	| < #FOLLOW : "F">
    | < #MOVE : "M">

}

Expression EXPRESSION_INIT() :
{
  Expression exp;
}
{
  
  < LACC > 
  exp = LISTE() 
  < RACC >
  (
   < NONE >
  {
    return exp;
  }
  | < EOF >
  {
    return exp;
  }
  )

}

Expression EXPRESSION() :
{
  Expression exp;
}
{
  exp = OPERATOR()
  {
    //System.out.println("Operator=" + exp.toString());
    return exp;
  }

| < LACC > 
  exp = LISTE() 
  < RACC >
  < NONE >
  {
    return exp;
  }
}

Expression LISTE() :
{
  Expression s1, s2;
}
{
    s1 = EXPRESSION()
  (
    < SEMI > s2 = EXPRESSION()
  {
    return (new Liste(s1, s2));
  }
  | < PIPE > s2 = EXPRESSION()
  {
    return (new Pipe(s1, s2));
  }
  | < MORETHAN > s2 = EXPRESSION()
  {
    return (new Morethan(s1, s2));
  }
  |
  {
    return s1;
  }
  )
  {
    return (new Nil());
  }
}

Expression OPERATOR() :
{
  Token t;
  String s;
}
{
  t = < UNAIRE >
  {
    s = t.toString();	
    return Dico.get(t.toString());
  }
}